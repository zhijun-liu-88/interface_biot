

function [d2Ndx2] = d2Ndx2Q9(xPPs, gxy)
% to compute the second order derivative of the shape functions of a Q9
% element with respect to the global coordinates. Only valid for
% rectangular elements  


MaxXPP = max(xPPs(:, 1));
MinXPP = min(xPPs(:, 1));
MaxYPP = max(xPPs(:, 2));
MinYPP = min(xPPs(:, 2));

lx = MaxXPP - MinXPP;   % length of the element in x direction 
ly = MaxYPP - MinYPP;   % length of the element in y direction 

LocalCoord = zeros(1, 2);
LocalCoord(1) = -1 + ( gxy(1) - MinXPP ) / lx * 2;
LocalCoord(2) = -1 + ( gxy(2) - MinYPP ) / ly * 2;

xi = LocalCoord(1); 
eta = LocalCoord(2); 

% second order derivatives of shape functions with respect to global
% coordinates 
d2Ndx2 = zeros(3, 18);
% d2Ndx2
d2Ndx2(1, :) = [ 1/2 * eta * (eta - 1),  0, ...
    1/2 * eta * (eta - 1), 0, ...
    1/2 * eta * (eta + 1), 0, ...
    1/2 * eta * (eta + 1), 0, ...
    -1 * eta * (eta - 1), 0, ...
    -1 * (eta + 1) * (eta - 1), 0, ...
    -1 * eta * (eta + 1), 0 ...
    -1 * (eta + 1) * (eta - 1), 0, ...
    2 * (eta + 1) * (eta - 1), 0 ] * (2/lx)^2;
d2Ndx2(2, :) = [ 1/2 * xi * (xi - 1), 0, ...
    1/2 * xi * (xi + 1), 0, ...
    1/2 * xi * (xi + 1), 0, ...
    1/2 * xi * (xi - 1), 0, ...
    -1 * (xi + 1) * (xi - 1), 0, ...
    -1 * xi * (xi + 1), 0, ...
    -1 * (xi + 1) * (xi - 1), 0, ...
    -1 * xi * (xi - 1), 0, ...
    2 * (xi + 1) * (xi - 1), 0 ] * (2/ly)^2; 
% d2Ndxdy
d2Ndx2(3, :) = [ 1/4 * (2 * xi - 1) * (2 * eta - 1), 0, ...
    1/4 * (2 * xi + 1) * (2 * eta - 1), 0, ...
    1/4 * (2 * xi + 1) * (2 * eta + 1), 0, ...
    1/4 * (2 * xi - 1) * (2 * eta + 1), 0, ...
    -1/2 * 2 * xi * (2 * eta - 1), 0, ...
    -1/2 * (2 * xi + 1) * 2 * eta, 0, ...
    -1/2 * 2 * xi * (2 * eta + 1), 0, ...
    -1/2 * (2 * xi - 1) * 2 * eta, 0, ...
    4 * xi * eta, 0 ] * 2/lx * 2/ly;